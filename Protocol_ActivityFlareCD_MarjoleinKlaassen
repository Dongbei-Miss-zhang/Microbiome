






#### _______________________________________________________________________________

## Setting my working Directory.  
setwd("~/Documents/Pilot Project - Virtual Time Line/working directory")

## Importing Valerie's/Floris/ Phenotype file.
db = read.csv("VALFLO.csv", header = T, sep = ";")
db = as.data.frame(db)

## Importing my metadata file (time relative to a flare).
VT = read.csv("VIRTUALTIMELINERDEF.csv", header = T, sep = ";")
VT = as.data.frame(VT)

## Merging Valerie's file with my file, to filter the patients who have
## no metagenomic sequencing data available. 
FinalVT = merge (db, VT, by="UMCGNoFromZIC", all = FALSE)
FinalVT=as.data.frame(FinalVT)
FinalVT = FinalVT[,c("Sex", "UMCGIBDDNAID", "PFReads", "AgeAtFecalSampling", "TimeEndPreviousExacerbation", "TimeToStartNextExacerbation", "DiagnosisCurrent", "DiseaseLocation", "MedicationPPI", "AntibioticsWithin3MonthsPriorToSampling", "BMI")]
FinalVT = FinalVT[,c(2, 1, 3, 7, 4, 5, 6, 11, 8, 9, 10)]

## Importing Kraken metagenomic sequencing file 'Taxonomy'. 
TaxaTest = read.table ("Kraken_taxonomy_norm.txt", header = TRUE)
temp1 = TaxaTest[grep("s__", row.names(TaxaTest)),]
TaxaTest2 = as.data.frame(t(temp1))

# Making this data proportional 
TaxaTest2 = TaxaTest2/100
rowSums(TaxaTest2)

## making rownames to new column
Taxafinal = as.data.frame(TaxaTest2)
Taxafinal["UMCGIBDDNAID"] = row.names(TaxaTest2)
Taxafinal=Taxafinal[,c(1237,1:1236)]

## Merging the taxonomy file and the metadata file 'time until flare'. 
TaxaVT = merge (FinalVT, Taxafinal, by = "UMCGIBDDNAID", all = FALSE)

## Converting all negative numbers (patient is in a flare multiple days) into 
## zero's (meaning that all patients in a flare are stated as just 'in a flare' =
## 0 days until last flare and 0 days until next flare)
TaxaVT = cbind(TaxaVT[,1:6], "TimePrevVT"=NA, "TimeToStartNextExacerbation"=TaxaVT$TimeToStartNextExacerbation, "TimeNextNegtoZer"=NA, TaxaVT[,8:ncol(TaxaVT)])

TaxaVT$TimeEndPreviousExacerbation = as.numeric(as.character(TaxaVT$TimeEndPreviousExacerbation))
TaxaVT$TimeToStartNextExacerbation = as.numeric(as.character(TaxaVT$TimeToStartNextExacerbation))

for (i in 1:nrow(TaxaVT)) {
  if (TaxaVT$TimeEndPreviousExacerbation[i] < 0 & !is.na(TaxaVT$TimeEndPreviousExacerbation[i])) {
    TaxaVT$TimePrevVT[i] = 0
    TaxaVT$TimeNextNegtoZer[i] = 0
  } else {
    TaxaVT$TimePrevVT[i] = TaxaVT$TimeEndPreviousExacerbation[i]
    TaxaVT$TimeNextNegtoZer[i] = TaxaVT$TimeToStartNextExacerbation[i]
  }
}

## Making 'days to the next flare' all zero. 
TaxaVT = cbind(TaxaVT[,1:9], "TimeNextVT"=NA, TaxaVT[,10:ncol(TaxaVT)])
for (i in 1:nrow(TaxaVT)) {
  if (TaxaVT$TimeNextNegtoZer[i] > 0 & !is.na(TaxaVT$TimeNextNegtoZer[i])) {
    TaxaVT$TimeNextVT[i] = ((TaxaVT$TimeNextNegtoZer[i])*-1)
  }
  else {
    TaxaVT$TimeNextVT[i] = TaxaVT$TimeNextNegtoZer[i]
  }
}


TaxaCD = TaxaVT[TaxaVT$DiagnosisCurrent == 'CD',]
TaxaCD = TaxaCD[,c(1:5, 7, 10, 11:1250)]

# When PPI use is not documented in patient, it is agreed that we report 'no PPI use'.
for (i in 1:nrow(TaxaCD)){
  if (is.na(TaxaCD$MedicationPPI[i])){
    TaxaCD$MedicationPPI[i] = "no"
  } else 
    TaxaCD$MedicationPPI[i] = TaxaCD$MedicationPPI[i]
}

# When Antibiotic use is not documented in patient, it is agreed that we report 'no ab use'. 
for (i in 1:nrow(TaxaCD)){
  if (is.na(TaxaCD$AntibioticsWithin3MonthsPriorToSampling[i])){
    TaxaCD$AntibioticsWithin3MonthsPriorToSampling[i] = "no"
  } else 
    TaxaCD$AntibioticsWithin3MonthsPriorToSampling[i] = TaxaCD$AntibioticsWithin3MonthsPriorToSampling[i]
}

# Zorgen dat het helemaal klopt, dan alle NextVT die 0 zijn, dan ook PrevVT hebben die nul is.
for (i in 1:nrow(TaxaCD)){
  if (!is.na(TaxaCD$TimePrevVT[i]) & TaxaCD$TimePrevVT[i] == 0 ){
    TaxaCD$TimeNextVT[i] = 0
  } else 
    TaxaCD$TimeNextVT[i] = TaxaCD$TimeNextVT[i]
}

for (i in 1:nrow(TaxaCD)){
  if (!is.na(TaxaCD$TimeNextVT[i]) & TaxaCD$TimeNextVT[i] == 0 ){
    TaxaCD$TimePrevVT[i] = 0
  } else 
    TaxaCD$TimePrevVT[i] = TaxaCD$TimePrevVT[i]
}


### Filtering out species that are abundant in <5% of patients
TaxonomyFilter = TaxaCD[,c(1, 12: 1247)]
TaxonomyFilter2 = TaxonomyFilter[,-1]
rownames(TaxonomyFilter2) = TaxonomyFilter[,1]
TaxonomyFilter2 = as.data.frame(t(TaxonomyFilter2))
TaxonomyFilter2[TaxonomyFilter2==0.00000000] =0.000000000

TaxonomyFilter2 = TaxonomyFilter2[rowSums(TaxonomyFilter2==0.000000000)<=228,]
TaxonomyFilter2 = as.data.frame(t(TaxonomyFilter2))
TaxonomyFilter2["UMCGIBDDNAID"] = row.names(TaxonomyFilter2)
TaxonomyFilter2=TaxonomyFilter2[,c(320, 1:319)]


TaxaVT = TaxaCD[,c(1:11)]
TaxaVT = merge(TaxaVT, TaxonomyFilter2, by= "UMCGIBDDNAID", all = FALSE)




###### Analysis 1: categorical comparison of gut metagenome, in patients who have >1 yr quiescent
###### disease, versus patients in a flare
###### So, we want to filter out patient who have prev/next flare <1 yr. 

InFlareNot = TaxaVT
InFlareNot$TimeNextVT[InFlareNot$TimeNextVT > (-365) & InFlareNot$TimeNextVT < 0] = NA
InFlareNot$TimePrevVT[InFlareNot$TimePrevVT > 0 & InFlareNot$TimePrevVT < 365] = NA

## Remove patients that have NA in both Prev/Next <1 yr flare
InFlareNot<-InFlareNot[!with(InFlareNot,is.na(InFlareNot$TimeNextVT)& is.na(InFlareNot$TimePrevVT)),]

## Creating new column 'in flare/ not in flare >1 yr'
InFlareNot = cbind(InFlareNot[,1:7], "TempColFlare"=NA, InFlareNot[,8:ncol(InFlareNot)])

## Giving value to new column 'in flare/ not in flare >1 yr'
for (i in 1:nrow(InFlareNot)){
  if (is.na(InFlareNot$TimeNextVT[i])) {
    InFlareNot$TempColFlare[i]= "None"
    InFlareNot$TimeNextVT[i] = "None"
  } else if (is.na(InFlareNot$TimePrevVT[i])){
    InFlareNot$TimePrevVT[i] = "None"
  } else if (InFlareNot$TimeNextVT[i]< 0) {
    InFlareNot$TempColFlare[i] = "before a flare"
  } else {
    InFlareNot$TempColFlare[i] = "during a flare"
  }
}
#
for (i in 1:nrow(InFlareNot)){
  if (InFlareNot$TimeNextVT[i] =="None"){
    InFlareNot$TempColFlare[i] = "after a flare"
  } else if (InFlareNot$TimePrevVT[i] =="None"){
    InFlareNot$TempColFlare[i] = "before a flare"
  } else if (InFlareNot$TimeNextVT[i] == 0){
    InFlareNot$TempColFlare[i] = "during a flare"
  } else if ((InFlareNot$TimeNextVT[i] != "None") & (InFlareNot$TimePrevVT[i] != "None")){ 
    if (as.numeric(InFlareNot$TimeNextVT[i]) + as.numeric(InFlareNot$TimePrevVT[i]) > 0){
      InFlareNot$TempColFlare[i] = "before a flare"
    } else {
      InFlareNot$TempColFlare[i] = "after a flare"
    }
  }
}

# Creating new column 'InFlareNot'
InFlareNot = cbind(InFlareNot[,1:8], "InFlareNot"=NA, InFlareNot[,9:ncol(InFlareNot)])

# Give value to rows in this column: in flare/not in flare
for (i in 1:nrow(InFlareNot)){
  if (InFlareNot$TempColFlare[i] == "before a flare"){
    InFlareNot$InFlareNot[i] = "Not in a flare"
  } else 
    InFlareNot$TempColFlare[i] = InFlareNot$TempColFlare[i]
}
#
for (i in 1:nrow(InFlareNot)){
  if (InFlareNot$TempColFlare[i] == "after a flare"){
    InFlareNot$InFlareNot[i] = "Not in a flare"
  } else 
    InFlareNot$TempColFlare[i] = InFlareNot$TempColFlare[i]
}
#
for (i in 1:nrow(InFlareNot)){
  if (InFlareNot$TempColFlare[i] == "during a flare"){
    InFlareNot$InFlareNot[i] = "In a flare"
  } else 
    InFlareNot$TempColFlare[i] = InFlareNot$TempColFlare[i]
}

InFlareNot = InFlareNot[,c(1, 9, 2:5, 10:332)]
write.table(InFlareNot, "InFlareNot.tsv", sep = "\t", quote = F, row.names = F)

## MaAsLin analysis 1: between patients >1 year quiescent disease versus in a flare 
Maaslin('InFlareNot.tsv','1.Taxa analysis 1',strInputConfig = '1.TaxaInFlare.read.config', dMinSamp = 0.25, fZeroInflated = T,strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'))








############## Linear analysis 2a
### (Patients who have next flare < 1 year) - (time until next flare). 
TaxaCDIIa = TaxaVT
TaxaCDIIa$TimeNextVT[TaxaCDIIa$TimeNextVT< (-365)]<-NA
TaxaCDIIa$TimePrevVT[TaxaCDIIa$TimePrevVT> 365]<-NA
#
TaxaCDIIa<-TaxaCDIIa[!with(TaxaCDIIa,is.na(TaxaCDIIa$TimeNextVT)& is.na(TaxaCDIIa$TimePrevVT)),]
#
TaxaCDIIa = cbind(TaxaCDIIa[,1:7], "LinBefore"=NA, TaxaCDIIa[,8:ncol(TaxaCDIIa)])
TaxaCDIIa$LinBefore = as.numeric(as.character(TaxaCDIIa$LinBefore))


for (i in 1:nrow(TaxaCDIIa)){
  if (is.na(TaxaCDIIa$TimeNextVT[i])) {
    TaxaCDIIa$LinBefore[i]= "None"
    TaxaCDIIa$TimeNextVT[i] = "None"
  } else if (is.na(TaxaCDIIa$TimePrevVT[i])){
    TaxaCDIIa$TimePrevVT[i] = "None"
  } else if (TaxaCDIIa$TimeNextVT[i]< 0) {
    TaxaCDIIa$LinBefore[i] = "before a flare"
  } else {
    TaxaCDIIa$LinBefore[i] = "during a flare"
  }
}

for (i in 1:nrow(TaxaCDIIa)){
  if (TaxaCDIIa$TimeNextVT[i] =="None"){
    TaxaCDIIa$LinBefore[i] = "after a flare"
  } else if (TaxaCDIIa$TimePrevVT[i] =="None"){
    TaxaCDIIa$LinBefore[i] = "before a flare"
  } else if (TaxaCDIIa$TimeNextVT[i] == 0){
    TaxaCDIIa$LinBefore[i] = "during a flare"
  } else if ((TaxaCDIIa$TimeNextVT[i] != "None") & (TaxaCDIIa$TimePrevVT[i] != "None")){ 
    if (as.numeric(TaxaCDIIa$TimeNextVT[i]) + as.numeric(TaxaCDIIa$TimePrevVT[i]) > 0){
      TaxaCDIIa$LinBefore[i] = "before a flare"
    } else {
      TaxaCDIIa$LinBefore[i] = "after a flare"
    }
  }
}

TaxaCDIIa = TaxaCDIIa[TaxaCDIIa$LinBefore!= "after a flare",]
TaxaCDIIa = TaxaCDIIa[TaxaCDIIa$LinBefore!= "during a flare",]

TaxaCDIIa = TaxaCDIIa[,c(1:5, 7:331)]
TaxaCDIIa$TimeNextVT = as.numeric(as.character(TaxaCDIIa$TimeNextVT))

#
TaxaCDIIa = TaxaCDIIa[,c(1, 6, 2:5, 8:330)]
write.table(TaxaCDIIa, "LinBeforein1Yr.tsv", sep = "\t", quote = F, row.names = F)

### MaAsLin run 2a (Patients who have next flare < 1 year) - (time until next flare). 
Maaslin('LinBeforein1Yr.tsv','Taxa analysis 2a ',strInputConfig = '2a.Taxa.read.config', dMinSamp = 0.25, fZeroInflated = T, strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'))







##### Analyses 2b: (Patients who had last flare < 1 year) - (time since last flare). 
LinAfterIIb = TaxaVT
#
LinAfterIIb$TimeNextVT[LinAfterIIb$TimeNextVT< (-365)]<-NA
LinAfterIIb$TimePrevVT[LinAfterIIb$TimePrevVT> 365]<-NA
#
LinAfterIIb<-LinAfterIIb[!with(LinAfterIIb,is.na(LinAfterIIb$TimeNextVT)& is.na(LinAfterIIb$TimePrevVT)),]
#
LinAfterIIb = cbind(LinAfterIIb[,1:7], "LinAfter"=NA, LinAfterIIb[,8:ncol(LinAfterIIb)])
LinAfterIIb$LinAfter = as.numeric(as.character(LinAfterIIb$LinAfter))


for (i in 1:nrow(LinAfterIIb)){
  if (is.na(LinAfterIIb$TimeNextVT[i])) {
    LinAfterIIb$LinAfter[i]= "None"
    LinAfterIIb$TimeNextVT[i] = "None"
  } else if (is.na(LinAfterIIb$TimePrevVT[i])){
    LinAfterIIb$TimePrevVT[i] = "None"
  } else if (LinAfterIIb$TimeNextVT[i]< 0) {
    LinAfterIIb$LinAfter[i] = "before a flare"
  } else {
    LinAfterIIb$LinAfter[i] = "during a flare"
  }
}

for (i in 1:nrow(LinAfterIIb)){
  if (LinAfterIIb$TimeNextVT[i] =="None"){
    LinAfterIIb$LinAfter[i] = "after a flare"
  } else if (LinAfterIIb$TimePrevVT[i] =="None"){
    LinAfterIIb$LinAfter[i] = "before a flare"
  } else if (LinAfterIIb$TimeNextVT[i] == 0){
    LinAfterIIb$LinAfter[i] = "during a flare"
  } else if ((LinAfterIIb$TimeNextVT[i] != "None") & (LinAfterIIb$TimePrevVT[i] != "None")){ 
    if (as.numeric(LinAfterIIb$TimeNextVT[i]) + as.numeric(LinAfterIIb$TimePrevVT[i]) > 0){
      LinAfterIIb$LinAfter[i] = "before a flare"
    } else {
      LinAfterIIb$LinAfter[i] = "after a flare"
    }
  }
}

LinAfterIIb = LinAfterIIb[LinAfterIIb$LinAfter!= "before a flare",]
LinAfterIIb = LinAfterIIb[LinAfterIIb$LinAfter!= "during a flare",]
LinAfterIIb$TimePrevVT = as.numeric(as.character(LinAfterIIb$TimePrevVT))

LinAfterIIb = LinAfterIIb[,c(1, 6, 2:5, 9:331)]
write.table(LinAfterIIb, "LinAfterin1Yr.tsv", sep = "\t", quote = F, row.names = F)
##2b 
Maaslin('LinAfterin1Yr.tsv','Taxa analysis 2b',strInputConfig = '2bTaxa.read.config', dMinSamp = 0.25, fZeroInflated = T, strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'))


















## ____________________________________________________________________________
##### Pathways
## Importing Valerie's Phenotype file.
db = read.csv("VALFLO.csv", header = T, sep = ";")
db = as.data.frame(db)

## Importing my metadata file (time relative to a flare).
VT = read.csv("VIRTUALTIMELINERDEF.csv", header = T, sep = ";")
VT = as.data.frame(VT)

## Merging Valerie's file with my file, to filter the patients who have
## no metagenomic sequencing data available. 
FinalVT = merge (db, VT, by="UMCGNoFromZIC", all = FALSE)
FinalVT=as.data.frame(FinalVT)
FinalVT = FinalVT[,c("Sex", "UMCGIBDDNAID", "PFReads", "AgeAtFecalSampling", "TimeEndPreviousExacerbation", "TimeToStartNextExacerbation", "DiagnosisCurrent", "DiseaseLocation", "MedicationPPI", "AntibioticsWithin3MonthsPriorToSampling", "BMI")]
FinalVT = FinalVT[,c(2, 1, 3, 7, 4, 5, 6, 11, 8, 9, 10)]

## Importing Kraken metagenomic sequencing file 'MetaCycpathways'. 
## This file is imported from Arnau. 
Metacyc = read.delim ("Metacyc_paths.txt", header = TRUE, sep = "\t")
Metacyc = as.data.frame(Metacyc)

## Making it proportional for MaAslin
MetacycProp= data.frame(matrix(nrow=nrow(Metacyc), ncol=ncol(Metacyc)))
colsum = colSums(Metacyc)
for (i in 1:ncol(Metacyc)) {
  for (j in 1:nrow(Metacyc)){MetacycProp[j,i]<- 100*Metacyc[j,i]/colsum[i]}
}

rownames(MetacycProp) = rownames(Metacyc)
colnames(MetacycProp) = colnames(Metacyc)
colSums(MetacycProp)

## Nu is de data proportional. Nu nog aan de vereiste voldoen om de data tussen
## 0 en 1 aan te leveren. 
MetacycProp= MetacycProp/100
colSums(MetacycProp)

## zorgen dat de kolommen dezelfde naam hebben voor het mergen
MetacycProp = as.data.frame(t(MetacycProp))
MetacycProp["UMCGIBDDNAID"] = row.names(MetacycProp)
MetacycProp=MetacycProp[,c(784,1:783)]

## Merging the taxonomy file and the metadata file 'time until flare'. 
MetaCycVTFin = merge (FinalVT, MetacycProp, by= "UMCGIBDDNAID", all = FALSE)


## Converting all negative numbers (patient is in a flare multiple days) into 
## zero's (meaning that all patients in a flare are stated as just 'in a flare' =
## 0 days until last flare and 0 days until next flare)
MetaCycVTFin = cbind(MetaCycVTFin[,1:6], "TimePrevVT"=NA, "TimeToStartNextExacerbation"=MetaCycVTFin$TimeToStartNextExacerbation, "TimeNextNegtoZer"=NA, MetaCycVTFin[,8:ncol(MetaCycVTFin)])

MetaCycVTFin$TimeEndPreviousExacerbation = as.numeric(as.character(MetaCycVTFin$TimeEndPreviousExacerbation))
MetaCycVTFin$TimeToStartNextExacerbation = as.numeric(as.character(MetaCycVTFin$TimeToStartNextExacerbation))

for (i in 1:nrow(MetaCycVTFin)) {
  if (MetaCycVTFin$TimeEndPreviousExacerbation[i] < 0 & !is.na(MetaCycVTFin$TimeEndPreviousExacerbation[i])) {
    MetaCycVTFin$TimePrevVT[i] = 0
    MetaCycVTFin$TimeNextNegtoZer[i] = 0
  } else {
    MetaCycVTFin$TimePrevVT[i] = MetaCycVTFin$TimeEndPreviousExacerbation[i]
    MetaCycVTFin$TimeNextNegtoZer[i] = MetaCycVTFin$TimeToStartNextExacerbation[i]
  }
}

## Making 'days to the next flare' all zero. 
MetaCycVTFin = cbind(MetaCycVTFin[,1:9], "TimeNextVT"=NA, MetaCycVTFin[,10:ncol(MetaCycVTFin)])
for (i in 1:nrow(MetaCycVTFin)) {
  if (MetaCycVTFin$TimeNextNegtoZer[i] > 0 & !is.na(MetaCycVTFin$TimeNextNegtoZer[i])) {
    MetaCycVTFin$TimeNextVT[i] = ((MetaCycVTFin$TimeNextNegtoZer[i])*-1)
  }
  else {
    MetaCycVTFin$TimeNextVT[i] = MetaCycVTFin$TimeNextNegtoZer[i]
  }
}

MetaCycCD = MetaCycVTFin[MetaCycVTFin$DiagnosisCurrent == 'CD',]
MetaCycCD = MetaCycCD[,c(1:5, 7, 10, 11:797)]

# When PPI use is not documented in patient, it is agreed that we report 'no PPI use'.
for (i in 1:nrow(MetaCycCD)){
  if (is.na(MetaCycCD$MedicationPPI[i])){
    MetaCycCD$MedicationPPI[i] = "no"
  } else 
    MetaCycCD$MedicationPPI[i] = MetaCycCD$MedicationPPI[i]
}

# When Antibiotic use is not documented in patient, it is agreed that we report 'no ab use'. 
for (i in 1:nrow(MetaCycCD)){
  if (is.na(MetaCycCD$AntibioticsWithin3MonthsPriorToSampling[i])){
    MetaCycCD$AntibioticsWithin3MonthsPriorToSampling[i] = "no"
  } else 
    MetaCycCD$AntibioticsWithin3MonthsPriorToSampling[i] = MetaCycCD$AntibioticsWithin3MonthsPriorToSampling[i]
}

# Zorgen dat het helemaal klopt, dan alle NextVT die 0 zijn, dan ook PrevVT hebben die nul is.
for (i in 1:nrow(MetaCycCD)){
  if (!is.na(MetaCycCD$TimePrevVT[i]) & MetaCycCD$TimePrevVT[i] == 0 ){
    MetaCycCD$TimeNextVT[i] = 0
  } else 
    MetaCycCD$TimeNextVT[i] = MetaCycCD$TimeNextVT[i]
}

for (i in 1:nrow(MetaCycCD)){
  if (!is.na(MetaCycCD$TimeNextVT[i]) & MetaCycCD$TimeNextVT[i] == 0 ){
    MetaCycCD$TimePrevVT[i] = 0
  } else 
    MetaCycCD$TimePrevVT[i] = MetaCycCD$TimePrevVT[i]
}



### Filtering out species that are abundant in <5% of patients
MCFilter = MetaCycCD[,c(1, 12: 794)]
MCFilter2 = MCFilter[,-1]
rownames(MCFilter2) = MCFilter[,1]
MCFilter2 = as.data.frame(t(MCFilter2))
MCFilter2 = MCFilter2[rowSums(MCFilter2==0.0000000000)<=228,]
MCFilter2 = as.data.frame(t(MCFilter2))
MCFilter2["UMCGIBDDNAID"] = row.names(MCFilter2)
MCFilter2=MCFilter2[,c(653, 1:652)]


MetaCycVT = MetaCycCD[,c(1:11)]
MetaCycVT = merge(MetaCycVT, MCFilter2, by= "UMCGIBDDNAID", all = FALSE)


## Er zijn dubbele punten in de kolomnamen. Hier kan MaAslin niet mee werken
## Nu wil ik dus alle ':' vervangen door '_'.
names(MetaCycVT) = gsub(x = names(MetaCycVT), pattern = ":", replacement = "_") 
names(MetaCycVT) = gsub(x = names(MetaCycVT), pattern = " ", replacement = "_") 
names(MetaCycVT) = gsub(x = names(MetaCycVT), pattern = "-", replacement = "_") 
names(MetaCycVT) = gsub(x = names(MetaCycVT), pattern = ")", replacement = "_") 
names(MetaCycVT) = gsub(x = names(MetaCycVT), pattern = "/", replacement = "_")
MetaCycVTTidy = make.names(colnames(MetaCycVT), unique = TRUE)
colnames(MetaCycVT) = MetaCycVTTidy 



###### Analysis 1: categorical comparison of gut metagenome, in patients who have >1 yr quiescent
###### disease, versus patients in a flare
###### So, we want to filter out patient who have prev/next flare <1 yr. 

MCInFlareNot = MetaCycVT

MCInFlareNot$TimeNextVT[MCInFlareNot$TimeNextVT > (-365) & MCInFlareNot$TimeNextVT < 0] = NA
MCInFlareNot$TimePrevVT[MCInFlareNot$TimePrevVT > 0 & MCInFlareNot$TimePrevVT < 365] = NA

## Remove patients that have NA in both Prev/Next <1 yr flare
MCInFlareNot<-MCInFlareNot[!with(MCInFlareNot,is.na(MCInFlareNot$TimeNextVT)& is.na(MCInFlareNot$TimePrevVT)),]

## Creating new column 'in flare/ not in flare >1 yr'
MCInFlareNot = cbind(MCInFlareNot[,1:7], "TempColFlare"=NA, MCInFlareNot[,8:ncol(MCInFlareNot)])

## Giving value to new column 'in flare/ not in flare >1 yr'
for (i in 1:nrow(MCInFlareNot)){
  if (is.na(MCInFlareNot$TimeNextVT[i])) {
    MCInFlareNot$TempColFlare[i]= "None"
    MCInFlareNot$TimeNextVT[i] = "None"
  } else if (is.na(MCInFlareNot$TimePrevVT[i])){
    MCInFlareNot$TimePrevVT[i] = "None"
  } else if (MCInFlareNot$TimeNextVT[i]< 0) {
    MCInFlareNot$TempColFlare[i] = "before a flare"
  } else {
    MCInFlareNot$TempColFlare[i] = "during a flare"
  }
}
#
for (i in 1:nrow(MCInFlareNot)){
  if (MCInFlareNot$TimeNextVT[i] =="None"){
    MCInFlareNot$TempColFlare[i] = "after a flare"
  } else if (MCInFlareNot$TimePrevVT[i] =="None"){
    MCInFlareNot$TempColFlare[i] = "before a flare"
  } else if (MCInFlareNot$TimeNextVT[i] == 0){
    MCInFlareNot$TempColFlare[i] = "during a flare"
  } else if ((MCInFlareNot$TimeNextVT[i] != "None") & (MCInFlareNot$TimePrevVT[i] != "None")){ 
    if (as.numeric(MCInFlareNot$TimeNextVT[i]) + as.numeric(MCInFlareNot$TimePrevVT[i]) > 0){
      MCInFlareNot$TempColFlare[i] = "before a flare"
    } else {
      MCInFlareNot$TempColFlare[i] = "after a flare"
    }
  }
}

# Creating new column 'InFlareNot'
MCInFlareNot = cbind(MCInFlareNot[,1:8], "InFlareNot"=NA, MCInFlareNot[,9:ncol(MCInFlareNot)])

# Give value to rows in this column: in flare/not in flare
for (i in 1:nrow(MCInFlareNot)){
  if (MCInFlareNot$TempColFlare[i] == "before a flare"){
    MCInFlareNot$InFlareNot[i] = "Not in a flare"
  } else 
    MCInFlareNot$TempColFlare[i] = MCInFlareNot$TempColFlare[i]
}
#
for (i in 1:nrow(MCInFlareNot)){
  if (MCInFlareNot$TempColFlare[i] == "after a flare"){
    MCInFlareNot$InFlareNot[i] = "Not in a flare"
  } else 
    MCInFlareNot$TempColFlare[i] = MCInFlareNot$TempColFlare[i]
}
#
for (i in 1:nrow(MCInFlareNot)){
  if (MCInFlareNot$TempColFlare[i] == "during a flare"){
    MCInFlareNot$InFlareNot[i] = "In a flare"
  } else 
    MCInFlareNot$TempColFlare[i] = MCInFlareNot$TempColFlare[i]
}

MCInFlareNot = MCInFlareNot[,c(1, 9, 2:5, 10:665)]
write.table(MCInFlareNot, "InFlareNot.tsv", sep = "\t", quote = F, row.names = F)

## MaAsLin analysis 1: between patients >1 year quiescent disease versus in a flare 
Maaslin('InFlareNot.tsv','1.MetaCyc analysis 1',strInputConfig = '1.MetaCyc.read.config', dMinSamp = 0.25, fZeroInflated = T,strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'))








############## Linear analysis 2a
### (Patients who have next flare < 1 year) - (time until next flare). 
MCCDIIa = MetaCycVT
MCCDIIa$TimeNextVT[MCCDIIa$TimeNextVT< (-365)]<-NA
MCCDIIa$TimePrevVT[MCCDIIa$TimePrevVT> 365]<-NA
#
MCCDIIa<-MCCDIIa[!with(MCCDIIa,is.na(MCCDIIa$TimeNextVT)& is.na(MCCDIIa$TimePrevVT)),]
#
MCCDIIa = cbind(MCCDIIa[,1:7], "LinBefore"=NA, MCCDIIa[,8:ncol(MCCDIIa)])
MCCDIIa$LinBefore = as.numeric(as.character(MCCDIIa$LinBefore))


for (i in 1:nrow(MCCDIIa)){
  if (is.na(MCCDIIa$TimeNextVT[i])) {
    MCCDIIa$LinBefore[i]= "None"
    MCCDIIa$TimeNextVT[i] = "None"
  } else if (is.na(MCCDIIa$TimePrevVT[i])){
    MCCDIIa$TimePrevVT[i] = "None"
  } else if (MCCDIIa$TimeNextVT[i]< 0) {
    MCCDIIa$LinBefore[i] = "before a flare"
  } else {
    MCCDIIa$LinBefore[i] = "during a flare"
  }
}

for (i in 1:nrow(MCCDIIa)){
  if (MCCDIIa$TimeNextVT[i] =="None"){
    MCCDIIa$LinBefore[i] = "after a flare"
  } else if (MCCDIIa$TimePrevVT[i] =="None"){
    MCCDIIa$LinBefore[i] = "before a flare"
  } else if (MCCDIIa$TimeNextVT[i] == 0){
    MCCDIIa$LinBefore[i] = "during a flare"
  } else if ((MCCDIIa$TimeNextVT[i] != "None") & (MCCDIIa$TimePrevVT[i] != "None")){ 
    if (as.numeric(MCCDIIa$TimeNextVT[i]) + as.numeric(MCCDIIa$TimePrevVT[i]) > 0){
      MCCDIIa$LinBefore[i] = "before a flare"
    } else {
      MCCDIIa$LinBefore[i] = "after a flare"
    }
  }
}

MCCDIIa = MCCDIIa[MCCDIIa$LinBefore!= "after a flare",]
MCCDIIa = MCCDIIa[MCCDIIa$LinBefore!= "during a flare",]

MCCDIIa = MCCDIIa[,c(1:5, 7:664)]
MCCDIIa$TimeNextVT = as.numeric(as.character(MCCDIIa$TimeNextVT))

#
MCCDIIa = MCCDIIa[,c(1, 6, 2:5, 8:663)]
write.table(MCCDIIa, "LinBeforein1Yr.tsv", sep = "\t", quote = F, row.names = F)

### MaAsLin run 2a (Patients who have next flare < 1 year) - (time until next flare). 
Maaslin('LinBeforein1Yr.tsv','MetaCyc analysis 2a ',strInputConfig = '2a.MetaCyc.read.config', dMinSamp = 0.25, fZeroInflated = T, strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'))







##### Analyses 2b: (Patients who had last flare < 1 year) - (time since last flare). 
MCLinAfterIIb = MetaCycVT
#
MCLinAfterIIb$TimeNextVT[MCLinAfterIIb$TimeNextVT< (-365)]<-NA
MCLinAfterIIb$TimePrevVT[MCLinAfterIIb$TimePrevVT> 365]<-NA
#
MCLinAfterIIb<-MCLinAfterIIb[!with(MCLinAfterIIb,is.na(MCLinAfterIIb$TimeNextVT)& is.na(MCLinAfterIIb$TimePrevVT)),]
#
MCLinAfterIIb = cbind(MCLinAfterIIb[,1:7], "LinAfter"=NA, MCLinAfterIIb[,8:ncol(MCLinAfterIIb)])
MCLinAfterIIb$LinAfter = as.numeric(as.character(MCLinAfterIIb$LinAfter))


for (i in 1:nrow(MCLinAfterIIb)){
  if (is.na(MCLinAfterIIb$TimeNextVT[i])) {
    MCLinAfterIIb$LinAfter[i]= "None"
    MCLinAfterIIb$TimeNextVT[i] = "None"
  } else if (is.na(MCLinAfterIIb$TimePrevVT[i])){
    MCLinAfterIIb$TimePrevVT[i] = "None"
  } else if (MCLinAfterIIb$TimeNextVT[i]< 0) {
    MCLinAfterIIb$LinAfter[i] = "before a flare"
  } else {
    MCLinAfterIIb$LinAfter[i] = "during a flare"
  }
}

for (i in 1:nrow(MCLinAfterIIb)){
  if (MCLinAfterIIb$TimeNextVT[i] =="None"){
    MCLinAfterIIb$LinAfter[i] = "after a flare"
  } else if (MCLinAfterIIb$TimePrevVT[i] =="None"){
    MCLinAfterIIb$LinAfter[i] = "before a flare"
  } else if (MCLinAfterIIb$TimeNextVT[i] == 0){
    MCLinAfterIIb$LinAfter[i] = "during a flare"
  } else if ((MCLinAfterIIb$TimeNextVT[i] != "None") & (MCLinAfterIIb$TimePrevVT[i] != "None")){ 
    if (as.numeric(MCLinAfterIIb$TimeNextVT[i]) + as.numeric(MCLinAfterIIb$TimePrevVT[i]) > 0){
      MCLinAfterIIb$LinAfter[i] = "before a flare"
    } else {
      MCLinAfterIIb$LinAfter[i] = "after a flare"
    }
  }
}

MCLinAfterIIb = MCLinAfterIIb[MCLinAfterIIb$LinAfter!= "before a flare",]
MCLinAfterIIb = MCLinAfterIIb[MCLinAfterIIb$LinAfter!= "during a flare",]
MCLinAfterIIb$TimePrevVT = as.numeric(as.character(MCLinAfterIIb$TimePrevVT))

MCLinAfterIIb = MCLinAfterIIb[,c(1, 6, 2:5, 9:664)]
write.table(MCLinAfterIIb, "LinAfterin1Yr.tsv", sep = "\t", quote = F, row.names = F)
##2b 
Maaslin('LinAfterin1Yr.tsv','MetaCyc analysis 2b',strInputConfig = '2b.MetaCyc.read.config', dMinSamp = 0.25, fZeroInflated = T, strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'))

























##--------------------------------------------------------------------------
######## Virulence factors
## Setting my working Directory.  
setwd("~/Documents/Pilot Project - Virtual Time Line/working directory")

## Importing Valerie's/Floris/ Phenotype file.
db = read.csv("VALFLO.csv", header = T, sep = ";")
db = as.data.frame(db)

## Importing my metadata file (time relative to a flare).
VT = read.csv("VIRTUALTIMELINERDEF.csv", header = T, sep = ";")
VT = as.data.frame(VT)

## Merging Valerie's file with my file, to filter the patients who have
## no metagenomic sequencing data available. 
FinalVT = merge (db, VT, by="UMCGNoFromZIC", all = FALSE)
FinalVT=as.data.frame(FinalVT)
FinalVT = FinalVT[,c("Sex", "UMCGIBDDNAID", "PFReads", "AgeAtFecalSampling", "TimeEndPreviousExacerbation", "TimeToStartNextExacerbation", "DiagnosisCurrent", "DiseaseLocation", "MedicationPPI", "AntibioticsWithin3MonthsPriorToSampling", "BMI")]
FinalVT = FinalVT[,c(2, 1, 3, 7, 4, 5, 6, 11, 8, 9, 10)]


## Importing Kraken metagenomic sequencing file 'Virulence Factors'. 
## This file is imported from Arnau. 
VirulenceFac = read.delim("virulence.txt", header = T, sep = "\t")
rownames(VirulenceFac) = paste(VirulenceFac$Gene, VirulenceFac$Product,VirulenceFac$VF_Name,VirulenceFac$Origin, sep = '_')
VirulenceFac = VirulenceFac[,5:ncol(VirulenceFac)]
VirulenceFac = as.data.frame(t(VirulenceFac))

VirulenceFac["UMCGIBDDNAID"] = row.names(VirulenceFac)
VirulenceFac = VirulenceFac[,c(1715, 1:1714)]

VirulenceFacVT = merge (FinalVT, VirulenceFac, by = "UMCGIBDDNAID", all = FALSE)


## Converting all negative numbers (patient is in a flare multiple days) into 
## zero's (meaning that all patients in a flare are stated as just 'in a flare' =
## 0 days until last flare and 0 days until next flare)
VirulenceFacVT = cbind(VirulenceFacVT[,1:6], "TimePrevVT"=NA, "TimeToStartNextExacerbation"=VirulenceFacVT$TimeToStartNextExacerbation, "TimeNextNegtoZer"=NA, VirulenceFacVT[,8:ncol(VirulenceFacVT)])

VirulenceFacVT$TimeEndPreviousExacerbation = as.numeric(as.character(VirulenceFacVT$TimeEndPreviousExacerbation))
VirulenceFacVT$TimeToStartNextExacerbation = as.numeric(as.character(VirulenceFacVT$TimeToStartNextExacerbation))

for (i in 1:nrow(VirulenceFacVT)) {
  if (VirulenceFacVT$TimeEndPreviousExacerbation[i] < 0 & !is.na(VirulenceFacVT$TimeEndPreviousExacerbation[i])) {
    VirulenceFacVT$TimePrevVT[i] = 0
    VirulenceFacVT$TimeNextNegtoZer[i] = 0
  } else {
    VirulenceFacVT$TimePrevVT[i] = VirulenceFacVT$TimeEndPreviousExacerbation[i]
    VirulenceFacVT$TimeNextNegtoZer[i] = VirulenceFacVT$TimeToStartNextExacerbation[i]
  }
}

## Making 'days to the next flare' all zero. 
VirulenceFacVT = cbind(VirulenceFacVT[,1:9], "TimeNextVT"=NA, VirulenceFacVT[,10:ncol(VirulenceFacVT)])
for (i in 1:nrow(VirulenceFacVT)) {
  if (VirulenceFacVT$TimeNextNegtoZer[i] > 0 & !is.na(VirulenceFacVT$TimeNextNegtoZer[i])) {
    VirulenceFacVT$TimeNextVT[i] = ((VirulenceFacVT$TimeNextNegtoZer[i])*-1)
  }
  else {
    VirulenceFacVT$TimeNextVT[i] = VirulenceFacVT$TimeNextNegtoZer[i]
  }
}


VirFacCD = VirulenceFacVT[VirulenceFacVT$DiagnosisCurrent == 'CD',]
VirFacCD = VirFacCD[,c(1:5, 7, 10, 11:1728)]

# When PPI use is not documented in patient, it is agreed that we report 'no PPI use'.
for (i in 1:nrow(VirFacCD)){
  if (is.na(VirFacCD$MedicationPPI[i])){
    VirFacCD$MedicationPPI[i] = "no"
  } else 
    VirFacCD$MedicationPPI[i] = VirFacCD$MedicationPPI[i]
}

# When Antibiotic use is not documented in patient, it is agreed that we report 'no ab use'. 
for (i in 1:nrow(VirFacCD)){
  if (is.na(VirFacCD$AntibioticsWithin3MonthsPriorToSampling[i])){
    VirFacCD$AntibioticsWithin3MonthsPriorToSampling[i] = "no"
  } else 
    VirFacCD$AntibioticsWithin3MonthsPriorToSampling[i] = VirFacCD$AntibioticsWithin3MonthsPriorToSampling[i]
}

# Zorgen dat het helemaal klopt, dan alle NextVT die 0 zijn, dan ook PrevVT hebben die nul is.
for (i in 1:nrow(VirFacCD)){
  if (!is.na(VirFacCD$TimePrevVT[i]) & VirFacCD$TimePrevVT[i] == 0 ){
    VirFacCD$TimeNextVT[i] = 0
  } else 
    VirFacCD$TimeNextVT[i] = VirFacCD$TimeNextVT[i]
}

for (i in 1:nrow(VirFacCD)){
  if (!is.na(VirFacCD$TimeNextVT[i]) & VirFacCD$TimeNextVT[i] == 0 ){
    VirFacCD$TimePrevVT[i] = 0
  } else 
    VirFacCD$TimePrevVT[i] = VirFacCD$TimePrevVT[i]
}


### Filtering out species that are abundant in <5% of patients
VF_Filter = VirFacCD[,c(1, 12: 1725)]
VF_Filter2 = VF_Filter[,-1]
rownames(VF_Filter2) = VF_Filter[,1]
VF_Filter2 = as.data.frame(t(VF_Filter2))

VF_Filter2 = VF_Filter2[rowSums(VF_Filter2==0.00)<=228,]
VF_Filter2 = as.data.frame(t(VF_Filter2))
VF_Filter2["UMCGIBDDNAID"] = row.names(VF_Filter2)
VF_Filter2=VF_Filter2[,c(924, 1:923)]


VF_VT = VirFacCD[,c(1:11)]
VF_VT = merge(VF_VT, VF_Filter2, by= "UMCGIBDDNAID", all = FALSE)




## Er zijn spaties en slashes in de kolomnamen. Hier kan MaAslin niet mee werken
## Nu wil ik dus alle ':' vervangen door '_'.
names(VF_VT) = gsub(x = names(VF_VT), pattern = " ", replacement = "_") 
names(VF_VT) = gsub(x = names(VF_VT), pattern = "/", replacement = "_") 
names(VF_VT) = gsub(x = names(VF_VT), pattern = ")", replacement = "_")
VFTidy = make.names(colnames(VF_VT), unique = TRUE)
colnames(VF_VT) = VFTidy





###### Analysis 1: categorical comparison of gut metagenome, in patients who have >1 yr quiescent
###### disease, versus patients in a flare
###### So, we want to filter out patient who have prev/next flare <1 yr. 

VFInFlareNot = VF_VT
VFInFlareNot$TimeNextVT[VFInFlareNot$TimeNextVT > (-365) & VFInFlareNot$TimeNextVT < 0] = NA
VFInFlareNot$TimePrevVT[VFInFlareNot$TimePrevVT > 0 & VFInFlareNot$TimePrevVT < 365] = NA

## Remove patients that have NA in both Prev/Next <1 yr flare
VFInFlareNot<-VFInFlareNot[!with(VFInFlareNot,is.na(VFInFlareNot$TimeNextVT)& is.na(VFInFlareNot$TimePrevVT)),]

## Creating new column 'in flare/ not in flare >1 yr'
VFInFlareNot = cbind(VFInFlareNot[,1:7], "TempColFlare"=NA, VFInFlareNot[,8:ncol(VFInFlareNot)])

## Giving value to new column 'in flare/ not in flare >1 yr'
for (i in 1:nrow(VFInFlareNot)){
  if (is.na(VFInFlareNot$TimeNextVT[i])) {
    VFInFlareNot$TempColFlare[i]= "None"
    VFInFlareNot$TimeNextVT[i] = "None"
  } else if (is.na(VFInFlareNot$TimePrevVT[i])){
    VFInFlareNot$TimePrevVT[i] = "None"
  } else if (VFInFlareNot$TimeNextVT[i]< 0) {
    VFInFlareNot$TempColFlare[i] = "before a flare"
  } else {
    VFInFlareNot$TempColFlare[i] = "during a flare"
  }
}
#
for (i in 1:nrow(VFInFlareNot)){
  if (VFInFlareNot$TimeNextVT[i] =="None"){
    VFInFlareNot$TempColFlare[i] = "after a flare"
  } else if (VFInFlareNot$TimePrevVT[i] =="None"){
    VFInFlareNot$TempColFlare[i] = "before a flare"
  } else if (VFInFlareNot$TimeNextVT[i] == 0){
    VFInFlareNot$TempColFlare[i] = "during a flare"
  } else if ((VFInFlareNot$TimeNextVT[i] != "None") & (VFInFlareNot$TimePrevVT[i] != "None")){ 
    if (as.numeric(VFInFlareNot$TimeNextVT[i]) + as.numeric(VFInFlareNot$TimePrevVT[i]) > 0){
      VFInFlareNot$TempColFlare[i] = "before a flare"
    } else {
      VFInFlareNot$TempColFlare[i] = "after a flare"
    }
  }
}

# Creating new column 'InFlareNot'
VFInFlareNot = cbind(VFInFlareNot[,1:8], "InFlareNot"=NA, VFInFlareNot[,9:ncol(VFInFlareNot)])

# Give value to rows in this column: in flare/not in flare
for (i in 1:nrow(VFInFlareNot)){
  if (VFInFlareNot$TempColFlare[i] == "before a flare"){
    VFInFlareNot$InFlareNot[i] = "Not in a flare"
  } else 
    VFInFlareNot$TempColFlare[i] = VFInFlareNot$TempColFlare[i]
}
#
for (i in 1:nrow(VFInFlareNot)){
  if (VFInFlareNot$TempColFlare[i] == "after a flare"){
    VFInFlareNot$InFlareNot[i] = "Not in a flare"
  } else 
    VFInFlareNot$TempColFlare[i] = VFInFlareNot$TempColFlare[i]
}
#
for (i in 1:nrow(VFInFlareNot)){
  if (VFInFlareNot$TempColFlare[i] == "during a flare"){
    VFInFlareNot$InFlareNot[i] = "In a flare"
  } else 
    VFInFlareNot$TempColFlare[i] = VFInFlareNot$TempColFlare[i]
}

VFInFlareNot = VFInFlareNot[,c(1, 9, 2:5, 10:936)]
write.table(VFInFlareNot, "InFlareNot.tsv", sep = "\t", quote = F, row.names = F)

## MaAsLin analysis 1: between patients >1 year quiescent disease versus in a flare 
Maaslin('InFlareNot.tsv','1.VirFac analysis 1',strInputConfig = '1.VirFac.read.config', dMinSamp = 0.25, fZeroInflated = T,strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'), strTransform = "none")








############## Linear analysis 2a
### (Patients who have next flare < 1 year) - (time until next flare). 
VF_CDIIa = VF_VT
VF_CDIIa$TimeNextVT[VF_CDIIa$TimeNextVT< (-365)]<-NA
VF_CDIIa$TimePrevVT[VF_CDIIa$TimePrevVT> 365]<-NA
#
VF_CDIIa<-VF_CDIIa[!with(VF_CDIIa,is.na(VF_CDIIa$TimeNextVT)& is.na(VF_CDIIa$TimePrevVT)),]
#
VF_CDIIa = cbind(VF_CDIIa[,1:7], "LinBefore"=NA, VF_CDIIa[,8:ncol(VF_CDIIa)])
VF_CDIIa$LinBefore = as.numeric(as.character(VF_CDIIa$LinBefore))


for (i in 1:nrow(VF_CDIIa)){
  if (is.na(VF_CDIIa$TimeNextVT[i])) {
    VF_CDIIa$LinBefore[i]= "None"
    VF_CDIIa$TimeNextVT[i] = "None"
  } else if (is.na(VF_CDIIa$TimePrevVT[i])){
    VF_CDIIa$TimePrevVT[i] = "None"
  } else if (VF_CDIIa$TimeNextVT[i]< 0) {
    VF_CDIIa$LinBefore[i] = "before a flare"
  } else {
    VF_CDIIa$LinBefore[i] = "during a flare"
  }
}

for (i in 1:nrow(VF_CDIIa)){
  if (VF_CDIIa$TimeNextVT[i] =="None"){
    VF_CDIIa$LinBefore[i] = "after a flare"
  } else if (VF_CDIIa$TimePrevVT[i] =="None"){
    VF_CDIIa$LinBefore[i] = "before a flare"
  } else if (VF_CDIIa$TimeNextVT[i] == 0){
    VF_CDIIa$LinBefore[i] = "during a flare"
  } else if ((VF_CDIIa$TimeNextVT[i] != "None") & (VF_CDIIa$TimePrevVT[i] != "None")){ 
    if (as.numeric(VF_CDIIa$TimeNextVT[i]) + as.numeric(VF_CDIIa$TimePrevVT[i]) > 0){
      VF_CDIIa$LinBefore[i] = "before a flare"
    } else {
      VF_CDIIa$LinBefore[i] = "after a flare"
    }
  }
}

VF_CDIIa = VF_CDIIa[VF_CDIIa$LinBefore!= "after a flare",]
VF_CDIIa = VF_CDIIa[VF_CDIIa$LinBefore!= "during a flare",]

VF_CDIIa = VF_CDIIa[,c(1:5, 7:935)]
VF_CDIIa$TimeNextVT = as.numeric(as.character(VF_CDIIa$TimeNextVT))

#
VF_CDIIa = VF_CDIIa[,c(1, 6, 2:5, 8:934)]
write.table(VF_CDIIa, "LinBeforein1Yr.tsv", sep = "\t", quote = F, row.names = F)

### MaAsLin run 2a (Patients who have next flare < 1 year) - (time until next flare). 
Maaslin('LinBeforein1Yr.tsv','Vir Fac analysis 2a ',strInputConfig = '2a.VirFac.read.config', dMinSamp = 0.25, fZeroInflated = T, strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'), strTransform = "none")







##### Analyses 2b: (Patients who had last flare < 1 year) - (time since last flare). 
VF_LinAfterIIb = VF_VT
#
VF_LinAfterIIb$TimeNextVT[VF_LinAfterIIb$TimeNextVT< (-365)]<-NA
VF_LinAfterIIb$TimePrevVT[VF_LinAfterIIb$TimePrevVT> 365]<-NA
#
VF_LinAfterIIb<-VF_LinAfterIIb[!with(VF_LinAfterIIb,is.na(VF_LinAfterIIb$TimeNextVT)& is.na(VF_LinAfterIIb$TimePrevVT)),]
#
VF_LinAfterIIb = cbind(VF_LinAfterIIb[,1:7], "LinAfter"=NA, VF_LinAfterIIb[,8:ncol(VF_LinAfterIIb)])
VF_LinAfterIIb$LinAfter = as.numeric(as.character(VF_LinAfterIIb$LinAfter))


for (i in 1:nrow(VF_LinAfterIIb)){
  if (is.na(VF_LinAfterIIb$TimeNextVT[i])) {
    VF_LinAfterIIb$LinAfter[i]= "None"
    VF_LinAfterIIb$TimeNextVT[i] = "None"
  } else if (is.na(VF_LinAfterIIb$TimePrevVT[i])){
    VF_LinAfterIIb$TimePrevVT[i] = "None"
  } else if (VF_LinAfterIIb$TimeNextVT[i]< 0) {
    VF_LinAfterIIb$LinAfter[i] = "before a flare"
  } else {
    VF_LinAfterIIb$LinAfter[i] = "during a flare"
  }
}

for (i in 1:nrow(VF_LinAfterIIb)){
  if (VF_LinAfterIIb$TimeNextVT[i] =="None"){
    VF_LinAfterIIb$LinAfter[i] = "after a flare"
  } else if (VF_LinAfterIIb$TimePrevVT[i] =="None"){
    VF_LinAfterIIb$LinAfter[i] = "before a flare"
  } else if (VF_LinAfterIIb$TimeNextVT[i] == 0){
    VF_LinAfterIIb$LinAfter[i] = "during a flare"
  } else if ((VF_LinAfterIIb$TimeNextVT[i] != "None") & (VF_LinAfterIIb$TimePrevVT[i] != "None")){ 
    if (as.numeric(VF_LinAfterIIb$TimeNextVT[i]) + as.numeric(VF_LinAfterIIb$TimePrevVT[i]) > 0){
      VF_LinAfterIIb$LinAfter[i] = "before a flare"
    } else {
      VF_LinAfterIIb$LinAfter[i] = "after a flare"
    }
  }
}

VF_LinAfterIIb = VF_LinAfterIIb[VF_LinAfterIIb$LinAfter!= "before a flare",]
VF_LinAfterIIb = VF_LinAfterIIb[VF_LinAfterIIb$LinAfter!= "during a flare",]
VF_LinAfterIIb$TimePrevVT = as.numeric(as.character(VF_LinAfterIIb$TimePrevVT))

VF_LinAfterIIb = VF_LinAfterIIb[,c(1, 6, 2:5, 9:935)]
write.table(VF_LinAfterIIb, "LinAfterin1Yr.tsv", sep = "\t", quote = F, row.names = F)
##2b 
Maaslin('LinAfterin1Yr.tsv','Vir Fac analysis 2b',strInputConfig = '2b.VirFac.read.config', dMinSamp = 0.25, fZeroInflated = T, strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'), strTransform = "none")



















##------------------------------------------------------------------------------
####### Growth Rates
## Setting my working Directory.  
setwd("~/Documents/Pilot Project - Virtual Time Line/working directory")

## Importing Valerie's/Floris/ Phenotype file.
db = read.csv("VALFLO.csv", header = T, sep = ";")
db = as.data.frame(db)

## Importing my metadata file (time relative to a flare).
VT = read.csv("VIRTUALTIMELINERDEF.csv", header = T, sep = ";")
VT = as.data.frame(VT)

## Merging Valerie's file with my file, to filter the patients who have
## no metagenomic sequencing data available. 
FinalVT = merge (db, VT, by="UMCGNoFromZIC", all = FALSE)
FinalVT=as.data.frame(FinalVT)
FinalVT = FinalVT[,c("Sex", "UMCGIBDDNAID", "PFReads", "AgeAtFecalSampling", "TimeEndPreviousExacerbation", "TimeToStartNextExacerbation", "DiagnosisCurrent", "DiseaseLocation", "MedicationPPI", "AntibioticsWithin3MonthsPriorToSampling", "BMI")]
FinalVT = FinalVT[,c(2, 1, 3, 7, 4, 5, 6, 11, 8, 9, 10)]

## Importing Kraken metagenomic sequencing file 'Growth Rates'. 
## This file is imported from Arnau.
GrowthRates = read.delim ("Growth_rates.txt", header = TRUE, sep = "\t")
GrowthRates = as.data.frame(t(GrowthRates))

## Growth rates hoeft niet proportional in Maaslin. Je moet alleen de 
## 'strTransform = NULL/ strTransform = FALSE' aan te zetten.
GrowthRates["UMCGIBDDNAID"] = row.names(GrowthRates)
GrowthRates=GrowthRates[,c(101,1:100)]

## Merging the taxonomy file and the metadata file 'time until flare'. 
GrowthRatesVT = merge (FinalVT, GrowthRates, by = "UMCGIBDDNAID", all = FALSE)

## Converting all negative numbers (patient is in a flare multiple days) into 
## zero's (meaning that all patients in a flare are stated as just 'in a flare' =
## 0 days until last flare and 0 days until next flare)
GrowthRatesVT = cbind(GrowthRatesVT[,1:6], "TimePrevVT"=NA, "TimeToStartNextExacerbation"=GrowthRatesVT$TimeToStartNextExacerbation, "TimeNextNegtoZer"=NA, GrowthRatesVT[,8:ncol(GrowthRatesVT)])

GrowthRatesVT$TimeEndPreviousExacerbation = as.numeric(as.character(GrowthRatesVT$TimeEndPreviousExacerbation))
GrowthRatesVT$TimeToStartNextExacerbation = as.numeric(as.character(GrowthRatesVT$TimeToStartNextExacerbation))

for (i in 1:nrow(GrowthRatesVT)) {
  if (GrowthRatesVT$TimeEndPreviousExacerbation[i] < 0 & !is.na(GrowthRatesVT$TimeEndPreviousExacerbation[i])) {
    GrowthRatesVT$TimePrevVT[i] = 0
    GrowthRatesVT$TimeNextNegtoZer[i] = 0
  } else {
    GrowthRatesVT$TimePrevVT[i] = GrowthRatesVT$TimeEndPreviousExacerbation[i]
    GrowthRatesVT$TimeNextNegtoZer[i] = GrowthRatesVT$TimeToStartNextExacerbation[i]
  }
}

## Making 'days to the next flare' all zero. 
GrowthRatesVT = cbind(GrowthRatesVT[,1:9], "TimeNextVT"=NA, GrowthRatesVT[,10:ncol(GrowthRatesVT)])
for (i in 1:nrow(GrowthRatesVT)) {
  if (GrowthRatesVT$TimeNextNegtoZer[i] > 0 & !is.na(GrowthRatesVT$TimeNextNegtoZer[i])) {
    GrowthRatesVT$TimeNextVT[i] = ((GrowthRatesVT$TimeNextNegtoZer[i])*-1)
  }
  else {
    GrowthRatesVT$TimeNextVT[i] = GrowthRatesVT$TimeNextNegtoZer[i]
  }
}

GR_CD = GrowthRatesVT[GrowthRatesVT$DiagnosisCurrent == 'CD',]
GR_CD = GR_CD[,c(1:5, 7, 10, 11:114)]


# When PPI use is not documented in patient, it is agreed that we report 'no PPI use'.
for (i in 1:nrow(GR_CD)){
  if (is.na(GR_CD$MedicationPPI[i])){
    GR_CD$MedicationPPI[i] = "no"
  } else 
    GR_CD$MedicationPPI[i] = GR_CD$MedicationPPI[i]
}

# When Antibiotic use is not documented in patient, it is agreed that we report 'no ab use'. 
for (i in 1:nrow(GR_CD)){
  if (is.na(GR_CD$AntibioticsWithin3MonthsPriorToSampling[i])){
    GR_CD$AntibioticsWithin3MonthsPriorToSampling[i] = "no"
  } else 
    GR_CD$AntibioticsWithin3MonthsPriorToSampling[i] = GR_CD$AntibioticsWithin3MonthsPriorToSampling[i]
}

# Zorgen dat het helemaal klopt, dan alle NextVT die 0 zijn, dan ook PrevVT hebben die nul is.
for (i in 1:nrow(GR_CD)){
  if (!is.na(GR_CD$TimePrevVT[i]) & GR_CD$TimePrevVT[i] == 0 ){
    GR_CD$TimeNextVT[i] = 0
  } else 
    GR_CD$TimeNextVT[i] = GR_CD$TimeNextVT[i]
}

for (i in 1:nrow(GR_CD)){
  if (!is.na(GR_CD$TimeNextVT[i]) & GR_CD$TimeNextVT[i] == 0 ){
    GR_CD$TimePrevVT[i] = 0
  } else 
    GR_CD$TimePrevVT[i] = GR_CD$TimePrevVT[i]
}


### Filtering out growth rates that are abundant in <5% of patients
GR_Filter = GR_CD[,c(1, 12: 111)]
GR_Filter2 = GR_Filter[,-1]
rownames(GR_Filter2) = GR_Filter[,1]
GR_Filter2 = as.data.frame(t(GR_Filter2))
GR_Filter2["NumberofNAs"] = rowSums(is.na(GR_Filter2))
GR_Filter2 = GR_Filter2[,c(241, 1:240)]
GR_Filter2 = GR_Filter2[GR_Filter2$NumberofNAs < 228,]
GR_Filter2 = GR_Filter2[,c(2:241)]
GR_Filter2 = as.data.frame(t(GR_Filter2))
GR_Filter2["UMCGIBDDNAID"] = row.names(GR_Filter2)
GR_Filter2 = GR_Filter2[,c(55, 1:54)]


GR_VT = GR_CD[,c(1:11)]
GR_VT = merge(GR_VT, GR_Filter2, by= "UMCGIBDDNAID", all = FALSE)

## Er zijn spaties in de kolomnamen. Hier kan MaAslin niet mee werken
## Nu wil ik dus alle ':' vervangen door '_'.
names(GR_VT) = gsub(x = names(GR_VT), pattern = " ", replacement = "_") 



####### GR NIET MET ZERO INFLATION
####### DENK GOED NA: ZERO INFLATION IS MET RELATIVE ABUNDANCE EN VIR FAC
####### strain diversity ook. 
####### maar GR dus niet.




###### Analysis 1: categorical comparison of gut metagenome, in patients who have >1 yr quiescent
###### disease, versus patients in a flare
###### So, we want to filter out patient who have prev/next flare <1 yr. 

GR_InFlareNot = GR_VT
GR_InFlareNot$TimeNextVT[GR_InFlareNot$TimeNextVT > (-365) & GR_InFlareNot$TimeNextVT < 0] = NA
GR_InFlareNot$TimePrevVT[GR_InFlareNot$TimePrevVT > 0 & GR_InFlareNot$TimePrevVT < 365] = NA

## Remove patients that have NA in both Prev/Next <1 yr flare
GR_InFlareNot<-GR_InFlareNot[!with(GR_InFlareNot,is.na(GR_InFlareNot$TimeNextVT)& is.na(GR_InFlareNot$TimePrevVT)),]

## Creating new column 'in flare/ not in flare >1 yr'
GR_InFlareNot = cbind(GR_InFlareNot[,1:7], "TempColFlare"=NA, GR_InFlareNot[,8:ncol(GR_InFlareNot)])

## Giving value to new column 'in flare/ not in flare >1 yr'
for (i in 1:nrow(GR_InFlareNot)){
  if (is.na(GR_InFlareNot$TimeNextVT[i])) {
    GR_InFlareNot$TempColFlare[i]= "None"
    GR_InFlareNot$TimeNextVT[i] = "None"
  } else if (is.na(GR_InFlareNot$TimePrevVT[i])){
    GR_InFlareNot$TimePrevVT[i] = "None"
  } else if (GR_InFlareNot$TimeNextVT[i]< 0) {
    GR_InFlareNot$TempColFlare[i] = "before a flare"
  } else {
    GR_InFlareNot$TempColFlare[i] = "during a flare"
  }
}
#
for (i in 1:nrow(GR_InFlareNot)){
  if (GR_InFlareNot$TimeNextVT[i] =="None"){
    GR_InFlareNot$TempColFlare[i] = "after a flare"
  } else if (GR_InFlareNot$TimePrevVT[i] =="None"){
    GR_InFlareNot$TempColFlare[i] = "before a flare"
  } else if (GR_InFlareNot$TimeNextVT[i] == 0){
    GR_InFlareNot$TempColFlare[i] = "during a flare"
  } else if ((GR_InFlareNot$TimeNextVT[i] != "None") & (GR_InFlareNot$TimePrevVT[i] != "None")){ 
    if (as.numeric(GR_InFlareNot$TimeNextVT[i]) + as.numeric(GR_InFlareNot$TimePrevVT[i]) > 0){
      GR_InFlareNot$TempColFlare[i] = "before a flare"
    } else {
      GR_InFlareNot$TempColFlare[i] = "after a flare"
    }
  }
}

# Creating new column 'InFlareNot'
GR_InFlareNot = cbind(GR_InFlareNot[,1:8], "InFlareNot"=NA, GR_InFlareNot[,9:ncol(GR_InFlareNot)])

# Give value to rows in this column: in flare/not in flare
for (i in 1:nrow(GR_InFlareNot)){
  if (GR_InFlareNot$TempColFlare[i] == "before a flare"){
    GR_InFlareNot$InFlareNot[i] = "Not in a flare"
  } else 
    GR_InFlareNot$TempColFlare[i] = GR_InFlareNot$TempColFlare[i]
}
#
for (i in 1:nrow(GR_InFlareNot)){
  if (GR_InFlareNot$TempColFlare[i] == "after a flare"){
    GR_InFlareNot$InFlareNot[i] = "Not in a flare"
  } else 
    GR_InFlareNot$TempColFlare[i] = GR_InFlareNot$TempColFlare[i]
}
#
for (i in 1:nrow(GR_InFlareNot)){
  if (GR_InFlareNot$TempColFlare[i] == "during a flare"){
    GR_InFlareNot$InFlareNot[i] = "In a flare"
  } else 
    GR_InFlareNot$TempColFlare[i] = GR_InFlareNot$TempColFlare[i]
}

GR_InFlareNot = GR_InFlareNot[,c(1, 9, 2:5, 10:67)]
write.table(GR_InFlareNot, "InFlareNot.tsv", sep = "\t", quote = F, row.names = F)

## MaAsLin analysis 1: between patients >1 year quiescent disease versus in a flare 
Maaslin('InFlareNot.tsv','GR analysis 1',strInputConfig = '1.GR.read.config', dMinSamp = 0.25,strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'), strTransform = "none")








############## Linear analysis 2a
### (Patients who have next flare < 1 year) - (time until next flare). 
GR_CDIIa = GR_VT
GR_CDIIa$TimeNextVT[GR_CDIIa$TimeNextVT< (-365)]<-NA
GR_CDIIa$TimePrevVT[GR_CDIIa$TimePrevVT> 365]<-NA
#
GR_CDIIa<-GR_CDIIa[!with(GR_CDIIa,is.na(GR_CDIIa$TimeNextVT)& is.na(GR_CDIIa$TimePrevVT)),]
#
GR_CDIIa = cbind(GR_CDIIa[,1:7], "LinBefore"=NA, GR_CDIIa[,8:ncol(GR_CDIIa)])
GR_CDIIa$LinBefore = as.numeric(as.character(GR_CDIIa$LinBefore))


for (i in 1:nrow(GR_CDIIa)){
  if (is.na(GR_CDIIa$TimeNextVT[i])) {
    GR_CDIIa$LinBefore[i]= "None"
    GR_CDIIa$TimeNextVT[i] = "None"
  } else if (is.na(GR_CDIIa$TimePrevVT[i])){
    GR_CDIIa$TimePrevVT[i] = "None"
  } else if (GR_CDIIa$TimeNextVT[i]< 0) {
    GR_CDIIa$LinBefore[i] = "before a flare"
  } else {
    GR_CDIIa$LinBefore[i] = "during a flare"
  }
}

for (i in 1:nrow(GR_CDIIa)){
  if (GR_CDIIa$TimeNextVT[i] =="None"){
    GR_CDIIa$LinBefore[i] = "after a flare"
  } else if (GR_CDIIa$TimePrevVT[i] =="None"){
    GR_CDIIa$LinBefore[i] = "before a flare"
  } else if (GR_CDIIa$TimeNextVT[i] == 0){
    GR_CDIIa$LinBefore[i] = "during a flare"
  } else if ((GR_CDIIa$TimeNextVT[i] != "None") & (GR_CDIIa$TimePrevVT[i] != "None")){ 
    if (as.numeric(GR_CDIIa$TimeNextVT[i]) + as.numeric(GR_CDIIa$TimePrevVT[i]) > 0){
      GR_CDIIa$LinBefore[i] = "before a flare"
    } else {
      GR_CDIIa$LinBefore[i] = "after a flare"
    }
  }
}

GR_CDIIa = GR_CDIIa[GR_CDIIa$LinBefore!= "after a flare",]
GR_CDIIa = GR_CDIIa[GR_CDIIa$LinBefore!= "during a flare",]

GR_CDIIa = GR_CDIIa[,c(1:5, 7:66)]
GR_CDIIa$TimeNextVT = as.numeric(as.character(GR_CDIIa$TimeNextVT))

#
GR_CDIIa = GR_CDIIa[,c(1, 6, 2:5, 8:65)]
write.table(GR_CDIIa, "LinBeforein1Yr.tsv", sep = "\t", quote = F, row.names = F)

### MaAsLin run 2a (Patients who have next flare < 1 year) - (time until next flare). 
Maaslin('LinBeforein1Yr.tsv','GR analysis 2a ',strInputConfig = '2a.GR.read.config', dMinSamp = 0.25,strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'), strTransform = "none")







##### Analyses 2b: (Patients who had last flare < 1 year) - (time since last flare). 
GR_LinAfterIIb = GR_VT
#
GR_LinAfterIIb$TimeNextVT[GR_LinAfterIIb$TimeNextVT< (-365)]<-NA
GR_LinAfterIIb$TimePrevVT[GR_LinAfterIIb$TimePrevVT> 365]<-NA
#
GR_LinAfterIIb<-GR_LinAfterIIb[!with(GR_LinAfterIIb,is.na(GR_LinAfterIIb$TimeNextVT)& is.na(GR_LinAfterIIb$TimePrevVT)),]
#
GR_LinAfterIIb = cbind(GR_LinAfterIIb[,1:7], "LinAfter"=NA, GR_LinAfterIIb[,8:ncol(GR_LinAfterIIb)])
GR_LinAfterIIb$LinAfter = as.numeric(as.character(GR_LinAfterIIb$LinAfter))


for (i in 1:nrow(GR_LinAfterIIb)){
  if (is.na(GR_LinAfterIIb$TimeNextVT[i])) {
    GR_LinAfterIIb$LinAfter[i]= "None"
    GR_LinAfterIIb$TimeNextVT[i] = "None"
  } else if (is.na(GR_LinAfterIIb$TimePrevVT[i])){
    GR_LinAfterIIb$TimePrevVT[i] = "None"
  } else if (GR_LinAfterIIb$TimeNextVT[i]< 0) {
    GR_LinAfterIIb$LinAfter[i] = "before a flare"
  } else {
    GR_LinAfterIIb$LinAfter[i] = "during a flare"
  }
}

for (i in 1:nrow(GR_LinAfterIIb)){
  if (GR_LinAfterIIb$TimeNextVT[i] =="None"){
    GR_LinAfterIIb$LinAfter[i] = "after a flare"
  } else if (GR_LinAfterIIb$TimePrevVT[i] =="None"){
    GR_LinAfterIIb$LinAfter[i] = "before a flare"
  } else if (GR_LinAfterIIb$TimeNextVT[i] == 0){
    GR_LinAfterIIb$LinAfter[i] = "during a flare"
  } else if ((GR_LinAfterIIb$TimeNextVT[i] != "None") & (GR_LinAfterIIb$TimePrevVT[i] != "None")){ 
    if (as.numeric(GR_LinAfterIIb$TimeNextVT[i]) + as.numeric(GR_LinAfterIIb$TimePrevVT[i]) > 0){
      GR_LinAfterIIb$LinAfter[i] = "before a flare"
    } else {
      GR_LinAfterIIb$LinAfter[i] = "after a flare"
    }
  }
}

GR_LinAfterIIb = GR_LinAfterIIb[GR_LinAfterIIb$LinAfter!= "before a flare",]
GR_LinAfterIIb = GR_LinAfterIIb[GR_LinAfterIIb$LinAfter!= "during a flare",]
GR_LinAfterIIb$TimePrevVT = as.numeric(as.character(GR_LinAfterIIb$TimePrevVT))

GR_LinAfterIIb = GR_LinAfterIIb[,c(1, 6, 2:5, 9:66)]
write.table(GR_LinAfterIIb, "LinAfterin1Yr.tsv", sep = "\t", quote = F, row.names = F)
##2b 
Maaslin('LinAfterin1Yr.tsv','GR analysis 2b',strInputConfig = '2b.GR.read.config', dMinSamp = 0.25, strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'), strTransform = "none")

















## _______________________________________________________________________________-
## Strain Diversity
## Importing Valerie's Phenotype file.
db = read.csv("VALFLO.csv", header = T, sep = ";")
db = as.data.frame(db)

## Importing my metadata file (time relative to a flare).
VT = read.csv("VIRTUALTIMELINERDEF.csv", header = T, sep = ";")
VT = as.data.frame(VT)

## Merging Valerie's file with my file, to filter the patients who have
## no metagenomic sequencing data available. 
FinalVT = merge (db, VT, by="UMCGNoFromZIC", all = FALSE)
FinalVT=as.data.frame(FinalVT)
FinalVT = FinalVT[,c("Sex", "WGSProjectID", "PFReads", "AgeAtFecalSampling", "TimeEndPreviousExacerbation", "TimeToStartNextExacerbation", "DiagnosisCurrent", "DiseaseLocation", "MedicationPPI", "AntibioticsWithin3MonthsPriorToSampling", "BMI")]
FinalVT = FinalVT[,c(2, 1, 3, 7, 4, 5, 6, 11, 8, 9, 10)]


## Importing Kraken metagenomic sequencing file 'Strain Diversity'. 
## This file is imported from Arnau.
StrainDiversity = read.delim("StrainDiversity.txt", header = T, sep = "\t")
rownames(StrainDiversity) <- StrainDiversity[,1]
StrainDiversity = StrainDiversity[,c(2:2077)]
StrainDiversity=as.data.frame(t(StrainDiversity))

StrainDiversity["WGSProjectID"] = row.names(StrainDiversity)
StrainDiversity = StrainDiversity[,c(141, 1:140)]

StrainDiversityVT = merge (FinalVT, StrainDiversity, by = "WGSProjectID", all = FALSE)
SD_VT = StrainDiversityVT

## Converting all negative numbers (patient is in a flare multiple days) into 
## zero's (meaning that all patients in a flare are stated as just 'in a flare' =
## 0 days until last flare and 0 days until next flare)
SD_VT = cbind(SD_VT[,1:6], "TimePrevVT"=NA, "TimeToStartNextExacerbation"=SD_VT$TimeToStartNextExacerbation, "TimeNextNegtoZer"=NA, SD_VT[,8:ncol(SD_VT)])

SD_VT$TimeEndPreviousExacerbation = as.numeric(as.character(SD_VT$TimeEndPreviousExacerbation))
SD_VT$TimeToStartNextExacerbation = as.numeric(as.character(SD_VT$TimeToStartNextExacerbation))

for (i in 1:nrow(SD_VT)) {
  if (SD_VT$TimeEndPreviousExacerbation[i] < 0 & !is.na(SD_VT$TimeEndPreviousExacerbation[i])) {
    SD_VT$TimePrevVT[i] = 0
    SD_VT$TimeNextNegtoZer[i] = 0
  } else {
    SD_VT$TimePrevVT[i] = SD_VT$TimeEndPreviousExacerbation[i]
    SD_VT$TimeNextNegtoZer[i] = SD_VT$TimeToStartNextExacerbation[i]
  }
}

## Making 'days to the next flare' all zero. 
SD_VT = cbind(SD_VT[,1:9], "TimeNextVT"=NA, SD_VT[,10:ncol(SD_VT)])
for (i in 1:nrow(SD_VT)) {
  if (SD_VT$TimeNextNegtoZer[i] > 0 & !is.na(SD_VT$TimeNextNegtoZer[i])) {
    SD_VT$TimeNextVT[i] = ((SD_VT$TimeNextNegtoZer[i])*-1)
  }
  else {
    SD_VT$TimeNextVT[i] = SD_VT$TimeNextNegtoZer[i]
  }
}

SD_CD = SD_VT[SD_VT$DiagnosisCurrent == 'CD',]
SD_CD = SD_CD[,c(1:5, 7, 10, 11:154)]

# When PPI use is not documented in patient, it is agreed that we report 'no PPI use'.
for (i in 1:nrow(SD_CD)){
  if (is.na(SD_CD$MedicationPPI[i])){
    SD_CD$MedicationPPI[i] = "no"
  } else 
    SD_CD$MedicationPPI[i] = SD_CD$MedicationPPI[i]
}

# When Antibiotic use is not documented in patient, it is agreed that we report 'no ab use'. 
for (i in 1:nrow(SD_CD)){
  if (is.na(SD_CD$AntibioticsWithin3MonthsPriorToSampling[i])){
    SD_CD$AntibioticsWithin3MonthsPriorToSampling[i] = "no"
  } else 
    SD_CD$AntibioticsWithin3MonthsPriorToSampling[i] = SD_CD$AntibioticsWithin3MonthsPriorToSampling[i]
}

# Zorgen dat het helemaal klopt, dan alle NextVT die 0 zijn, dan ook PrevVT hebben die nul is.
for (i in 1:nrow(SD_CD)){
  if (!is.na(SD_CD$TimePrevVT[i]) & SD_CD$TimePrevVT[i] == 0 ){
    SD_CD$TimeNextVT[i] = 0
  } else 
    SD_CD$TimeNextVT[i] = SD_CD$TimeNextVT[i]
}

for (i in 1:nrow(SD_CD)){
  if (!is.na(SD_CD$TimeNextVT[i]) & SD_CD$TimeNextVT[i] == 0 ){
    SD_CD$TimePrevVT[i] = 0
  } else 
    SD_CD$TimePrevVT[i] = SD_CD$TimePrevVT[i]
}


### Filtering out strains that are abundant in <5% of patients
SD_Filter = SD_CD[,c(1, 12: 151)]
SD_Filter2 = SD_Filter[,-1]
rownames(SD_Filter2) = SD_Filter[,1]
SD_Filter2 = as.data.frame(t(SD_Filter2))
SD_Filter2["NumberofNAs"] = rowSums(is.na(SD_Filter2))
SD_Filter2 = SD_Filter2[,c(248, 1:247)]
SD_Filter2 = SD_Filter2[SD_Filter2$NumberofNAs < 235,]
SD_Filter2 = SD_Filter2[,c(2:248)]
SD_Filter2 = as.data.frame(t(SD_Filter2))
SD_Filter2["WGSProjectID"] = row.names(SD_Filter2)
SD_Filter2 = SD_Filter2[,c(105, 1:104)]


SD_VT = SD_CD[,c(1:11)]
SD_VT = merge(SD_VT, SD_Filter2, by= "WGSProjectID", all = FALSE)


## Er zijn spaties in de kolomnamen. Hier kan MaAslin niet mee werken
## Nu wil ik dus alle ':' vervangen door '_'.
names(SD_VT) = gsub(x = names(SD_VT), pattern = " ", replacement = "_") 




## 0 means that the species of which the heterozygosity is being calculated, is present in 
##the sample. However, the specific strain is not.
## NA means that the species of which the heterozygosity is being calculated, 
##is not present in the sample. Therefore it's heterozygosity can not be computed and 
## a NA results.








###### Analysis 1: categorical comparison of gut metagenome, in patients who have >1 yr quiescent
###### disease, versus patients in a flare
###### So, we want to filter out patient who have prev/next flare <1 yr. 

SD_InFlareNot = SD_VT
SD_InFlareNot$TimeNextVT[SD_InFlareNot$TimeNextVT > (-365) & SD_InFlareNot$TimeNextVT < 0] = NA
SD_InFlareNot$TimePrevVT[SD_InFlareNot$TimePrevVT > 0 & SD_InFlareNot$TimePrevVT < 365] = NA

## Remove patients that have NA in both Prev/Next <1 yr flare
SD_InFlareNot<-SD_InFlareNot[!with(SD_InFlareNot,is.na(SD_InFlareNot$TimeNextVT)& is.na(SD_InFlareNot$TimePrevVT)),]

## Creating new column 'in flare/ not in flare >1 yr'
SD_InFlareNot = cbind(SD_InFlareNot[,1:7], "TempColFlare"=NA, SD_InFlareNot[,8:ncol(SD_InFlareNot)])

## Giving value to new column 'in flare/ not in flare >1 yr'
for (i in 1:nrow(SD_InFlareNot)){
  if (is.na(SD_InFlareNot$TimeNextVT[i])) {
    SD_InFlareNot$TempColFlare[i]= "None"
    SD_InFlareNot$TimeNextVT[i] = "None"
  } else if (is.na(SD_InFlareNot$TimePrevVT[i])){
    SD_InFlareNot$TimePrevVT[i] = "None"
  } else if (SD_InFlareNot$TimeNextVT[i]< 0) {
    SD_InFlareNot$TempColFlare[i] = "before a flare"
  } else {
    SD_InFlareNot$TempColFlare[i] = "during a flare"
  }
}
#
for (i in 1:nrow(SD_InFlareNot)){
  if (SD_InFlareNot$TimeNextVT[i] =="None"){
    SD_InFlareNot$TempColFlare[i] = "after a flare"
  } else if (SD_InFlareNot$TimePrevVT[i] =="None"){
    SD_InFlareNot$TempColFlare[i] = "before a flare"
  } else if (SD_InFlareNot$TimeNextVT[i] == 0){
    SD_InFlareNot$TempColFlare[i] = "during a flare"
  } else if ((SD_InFlareNot$TimeNextVT[i] != "None") & (SD_InFlareNot$TimePrevVT[i] != "None")){ 
    if (as.numeric(SD_InFlareNot$TimeNextVT[i]) + as.numeric(SD_InFlareNot$TimePrevVT[i]) > 0){
      SD_InFlareNot$TempColFlare[i] = "before a flare"
    } else {
      SD_InFlareNot$TempColFlare[i] = "after a flare"
    }
  }
}

# Creating new column 'InFlareNot'
SD_InFlareNot = cbind(SD_InFlareNot[,1:8], "InFlareNot"=NA, SD_InFlareNot[,9:ncol(SD_InFlareNot)])

# Give value to rows in this column: in flare/not in flare
for (i in 1:nrow(SD_InFlareNot)){
  if (SD_InFlareNot$TempColFlare[i] == "before a flare"){
    SD_InFlareNot$InFlareNot[i] = "Not in a flare"
  } else 
    SD_InFlareNot$TempColFlare[i] = SD_InFlareNot$TempColFlare[i]
}
#
for (i in 1:nrow(SD_InFlareNot)){
  if (SD_InFlareNot$TempColFlare[i] == "after a flare"){
    SD_InFlareNot$InFlareNot[i] = "Not in a flare"
  } else 
    SD_InFlareNot$TempColFlare[i] = SD_InFlareNot$TempColFlare[i]
}
#
for (i in 1:nrow(SD_InFlareNot)){
  if (SD_InFlareNot$TempColFlare[i] == "during a flare"){
    SD_InFlareNot$InFlareNot[i] = "In a flare"
  } else 
    SD_InFlareNot$TempColFlare[i] = SD_InFlareNot$TempColFlare[i]
}

SD_InFlareNot = SD_InFlareNot[,c(1, 9, 2:5, 10:117)]
write.table(SD_InFlareNot, "InFlareNot.tsv", sep = "\t", quote = F, row.names = F)

## MaAsLin analysis 1: between patients >1 year quiescent disease versus in a flare 
Maaslin('InFlareNot.tsv','SD analysis 1',strInputConfig = '1.SD.read.config', dMinSamp = 0.25, fZeroInflated = T, strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'))








############## Linear analysis 2a
### (Patients who have next flare < 1 year) - (time until next flare). 
SD_CDIIa = SD_VT
SD_CDIIa$TimeNextVT[SD_CDIIa$TimeNextVT< (-365)]<-NA
SD_CDIIa$TimePrevVT[SD_CDIIa$TimePrevVT> 365]<-NA
#
SD_CDIIa<-SD_CDIIa[!with(SD_CDIIa,is.na(SD_CDIIa$TimeNextVT)& is.na(SD_CDIIa$TimePrevVT)),]
#
SD_CDIIa = cbind(SD_CDIIa[,1:7], "LinBefore"=NA, SD_CDIIa[,8:ncol(SD_CDIIa)])
SD_CDIIa$LinBefore = as.numeric(as.character(SD_CDIIa$LinBefore))


for (i in 1:nrow(SD_CDIIa)){
  if (is.na(SD_CDIIa$TimeNextVT[i])) {
    SD_CDIIa$LinBefore[i]= "None"
    SD_CDIIa$TimeNextVT[i] = "None"
  } else if (is.na(SD_CDIIa$TimePrevVT[i])){
    SD_CDIIa$TimePrevVT[i] = "None"
  } else if (SD_CDIIa$TimeNextVT[i]< 0) {
    SD_CDIIa$LinBefore[i] = "before a flare"
  } else {
    SD_CDIIa$LinBefore[i] = "during a flare"
  }
}

for (i in 1:nrow(SD_CDIIa)){
  if (SD_CDIIa$TimeNextVT[i] =="None"){
    SD_CDIIa$LinBefore[i] = "after a flare"
  } else if (SD_CDIIa$TimePrevVT[i] =="None"){
    SD_CDIIa$LinBefore[i] = "before a flare"
  } else if (SD_CDIIa$TimeNextVT[i] == 0){
    SD_CDIIa$LinBefore[i] = "during a flare"
  } else if ((SD_CDIIa$TimeNextVT[i] != "None") & (SD_CDIIa$TimePrevVT[i] != "None")){ 
    if (as.numeric(SD_CDIIa$TimeNextVT[i]) + as.numeric(SD_CDIIa$TimePrevVT[i]) > 0){
      SD_CDIIa$LinBefore[i] = "before a flare"
    } else {
      SD_CDIIa$LinBefore[i] = "after a flare"
    }
  }
}

SD_CDIIa = SD_CDIIa[SD_CDIIa$LinBefore!= "after a flare",]
SD_CDIIa = SD_CDIIa[SD_CDIIa$LinBefore!= "during a flare",]

SD_CDIIa = SD_CDIIa[,c(1:5, 7:116)]
SD_CDIIa$TimeNextVT = as.numeric(as.character(SD_CDIIa$TimeNextVT))

#
SD_CDIIa = SD_CDIIa[,c(1, 6, 2:5, 8:115)]
write.table(SD_CDIIa, "LinBeforein1Yr.tsv", sep = "\t", quote = F, row.names = F)

### MaAsLin run 2a (Patients who have next flare < 1 year) - (time until next flare). 
Maaslin('LinBeforein1Yr.tsv','SD analysis 2a ',strInputConfig = '2a.SD.read.config', dMinSamp = 0.25, fZeroInflated = T, strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'))







##### Analyses 2b: (Patients who had last flare < 1 year) - (time since last flare). 
SD_LinAfterIIb = SD_VT
#
SD_LinAfterIIb$TimeNextVT[SD_LinAfterIIb$TimeNextVT< (-365)]<-NA
SD_LinAfterIIb$TimePrevVT[SD_LinAfterIIb$TimePrevVT> 365]<-NA
#
SD_LinAfterIIb<-SD_LinAfterIIb[!with(SD_LinAfterIIb,is.na(SD_LinAfterIIb$TimeNextVT)& is.na(SD_LinAfterIIb$TimePrevVT)),]
#
SD_LinAfterIIb = cbind(SD_LinAfterIIb[,1:7], "LinAfter"=NA, SD_LinAfterIIb[,8:ncol(SD_LinAfterIIb)])
SD_LinAfterIIb$LinAfter = as.numeric(as.character(SD_LinAfterIIb$LinAfter))


for (i in 1:nrow(SD_LinAfterIIb)){
  if (is.na(SD_LinAfterIIb$TimeNextVT[i])) {
    SD_LinAfterIIb$LinAfter[i]= "None"
    SD_LinAfterIIb$TimeNextVT[i] = "None"
  } else if (is.na(SD_LinAfterIIb$TimePrevVT[i])){
    SD_LinAfterIIb$TimePrevVT[i] = "None"
  } else if (SD_LinAfterIIb$TimeNextVT[i]< 0) {
    SD_LinAfterIIb$LinAfter[i] = "before a flare"
  } else {
    SD_LinAfterIIb$LinAfter[i] = "during a flare"
  }
}

for (i in 1:nrow(SD_LinAfterIIb)){
  if (SD_LinAfterIIb$TimeNextVT[i] =="None"){
    SD_LinAfterIIb$LinAfter[i] = "after a flare"
  } else if (SD_LinAfterIIb$TimePrevVT[i] =="None"){
    SD_LinAfterIIb$LinAfter[i] = "before a flare"
  } else if (SD_LinAfterIIb$TimeNextVT[i] == 0){
    SD_LinAfterIIb$LinAfter[i] = "during a flare"
  } else if ((SD_LinAfterIIb$TimeNextVT[i] != "None") & (SD_LinAfterIIb$TimePrevVT[i] != "None")){ 
    if (as.numeric(SD_LinAfterIIb$TimeNextVT[i]) + as.numeric(SD_LinAfterIIb$TimePrevVT[i]) > 0){
      SD_LinAfterIIb$LinAfter[i] = "before a flare"
    } else {
      SD_LinAfterIIb$LinAfter[i] = "after a flare"
    }
  }
}

SD_LinAfterIIb = SD_LinAfterIIb[SD_LinAfterIIb$LinAfter!= "before a flare",]
SD_LinAfterIIb = SD_LinAfterIIb[SD_LinAfterIIb$LinAfter!= "during a flare",]
SD_LinAfterIIb$TimePrevVT = as.numeric(as.character(SD_LinAfterIIb$TimePrevVT))

SD_LinAfterIIb = SD_LinAfterIIb[,c(1, 6, 2:5, 9:116)]
write.table(SD_LinAfterIIb, "LinAfterin1Yr.tsv", sep = "\t", quote = F, row.names = F)
##2b 
Maaslin('LinAfterin1Yr.tsv','SD analysis 2b',strInputConfig = '2b.SD.read.config', dMinSamp = 0.25, fZeroInflated = T, strForcedPredictors = c('Sex', 'PFReads', 'AgeAtFecalSampling', 'BMI', 'DiseaseLocation', 'MedicationPPI', 'AntibioticsWithin3MonthsPriorToSampling'))







